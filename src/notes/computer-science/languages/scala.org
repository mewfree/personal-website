#+title: Scala

[[file:../../../homepage.org][Homepage]] / [[file:../../../notes.org][Notes]] / [[file:../../computer-science.org][Computer Science]] / [[file:../languages.org][Programming Languages]] / Scala

* Setup
** Coursier
https://get-coursier.io/

The recommended way to install [[file:scala.org][Scala]] and other tools (=Ammonite=, =SBT=...)

** Ammonite
https://ammonite.io/

*** Modernized Scala REPL
https://ammonite.io/#RunningAmmoniteREPL

*** Scala Scripts
https://ammonite.io/#ScalaScripts

** org-babel
In [[file:../tools/text-editors/emacs/doom-emacs.org][Doom Emacs]], use =amm= (Ammonite) in =#+begin_src= code blocks and not =scala=

Make sure to have a =~/.ammonite/predef.sc= file present

* Language Features
** Basics
#+begin_src amm
println("hello, world!")
#+end_src

#+RESULTS:
: hello, world!

** Strings
*** Concatenation
#+begin_src amm
println("This is " + "a string")
#+end_src

#+RESULTS:
: This is a string

** Numbers
#+begin_src amm
println(1 + 1)
#+end_src

#+RESULTS:
: 2

*** Ranges
#+begin_src amm
println((1 to 5))
#+end_src

#+RESULTS:
: Range 1 to 5

** Values
Values are immutable
#+begin_src amm
val x = 1 + 1
#+end_src

#+RESULTS:
: x: Int = 2

** Variables
Variables are similar to values, but can be re-assigned
#+begin_src amm
var y = 1 + 1
y = y + 1
#+end_src

#+RESULTS:
: y: Int = 3

** Blocks
Expressions can be combined together in blocks surrounded by curly braces ={}=
#+begin_src amm
println({
  val z = 2
  z + 2
})
#+end_src

#+RESULTS:
: 4

** Functions
#+begin_src amm
val addOne = (x: Int) => x + 1
println(addOne(5))
#+end_src

#+RESULTS:
: 6
: addOne: Int => Int = ammonite.$sess.cmd31$$$Lambda$1460/0x00000008011a87d8@39ff4421

*** Compose
#+begin_src amm
val f = (s: String) => "(" + s + ")"
val g = (s: String) => "(" + s + ")"
#+end_src

#+RESULTS:
: f: String => String = ammonite.$sess.cmd80$$$Lambda$1704/0x00000008011e6ef0@55ba1297
: g: String => String = ammonite.$sess.cmd80$$$Lambda$1705/0x00000008011e72a0@be4982d

#+begin_src amm
println(f("in parentheses"))
#+end_src

#+RESULTS:
: (in parentheses)

#+begin_src amm
val fComposeG = f compose g
#+end_src

#+RESULTS:
: fComposeG: String => String = scala.Function1$$Lambda$1709/0x00000008011e1c20@23afde4a

#+begin_src amm
println(fComposeG("in double parentheses"))
#+end_src

#+RESULTS:
: ((in double parentheses))

** Methods
#+begin_src amm
def add(x: Int, y: Int): Int = x + y
println(add(1, 2))
#+end_src

#+RESULTS:
: 3
: defined function add

** Classes
#+begin_src amm
class Greeter(prefix: String, suffix: String) {
  def greet(name: String): Unit =
    println(prefix + name + suffix)
}
#+end_src

#+RESULTS:
: defined class Greeter

#+begin_src amm
val greeter = new Greeter("Hello, ", "!")
greeter.greet("Damien")
#+end_src

#+RESULTS:
: Hello, Damien!
: greeter: Greeter = ammonite.$sess.cmd34$Greeter@7585531b

** Case Classes
Immutable and compared by value (not reference like =classes=)
#+begin_src amm
case class Point(x: Int, y: Int)
#+end_src

#+RESULTS:
: defined class Point

#+begin_src amm
val point = Point(1, 2)
val anotherPoint = Point (1, 2)

println(point == anotherPoint)
#+end_src

#+RESULTS:
: true
: point: Point = Point(x = 1, y = 2)
: anotherPoint: Point = Point(x = 1, y = 2)

** Objects
Singletons of their own classes
#+begin_src amm
object IdFactory {
  private var counter = 0
  def create(): Int = {
    counter += 1
    counter
  }
}
#+end_src

#+RESULTS:
: defined object IdFactory

#+begin_src amm
val newId: Int = IdFactory.create()
println(newId)
val newerId: Int = IdFactory.create()
println(newerId)
#+end_src

#+RESULTS:
: 1
: 2
: newId: Int = 1
: newerId: Int = 2

** Traits
#+begin_src amm
trait Greeter {
  def greet(name: String): Unit =
    println("Hello, " + name + "!")
}
#+end_src

#+RESULTS:
: defined trait Greeter

#+begin_src amm
class DefaultGreeter extends Greeter

class CustomizableGreeter(prefix: String, postfix: String) extends Greeter {
  override def greet(name: String): Unit = {
    println(prefix + name + postfix)
  }
}

val greeter = new DefaultGreeter()
greeter.greet("Damien")

val customGreeter = new CustomizableGreeter("How are you, ", "?")
customGreeter.greet("Damien")
#+end_src

#+RESULTS:
: Hello, Damien!
: How are you, Damien?
: defined class DefaultGreeter
: defined class CustomizableGreeter
: greeter: DefaultGreeter = ammonite.$sess.cmd46$DefaultGreeter@61f18402
: customGreeter: CustomizableGreeter = ammonite.$sess.cmd46$CustomizableGreeter@63b187f

** Data Structures
*** Collections
**** Tuples
Fixed number of elements. Heterogeneous (can hold multiple types). One-indexed.
#+begin_src amm
val t = (1, "hello", Console)
#+end_src

#+RESULTS:
: t: (Int, String, Console.type) = (1, "hello", scala.Console$@fc807c1)

Above is syntactic sugar for:
#+begin_src amm
val t = new Tuple3(1, "hello", Console)
#+end_src

#+RESULTS:
: t: (Int, String, Console.type) = (1, "hello", scala.Console$@fc807c1)

***** Accessing an element by index
#+begin_src amm
println(t._2)
#+end_src

#+RESULTS:
: hello

***** Short form for tuples with only two elements
#+begin_src amm
val short_t = 1 -> 2
#+end_src

#+RESULTS:
: short_t: (Int, Int) = (1, 2)

***** Swap elements for tuples with only two elements
#+begin_src amm
println(short_t.swap)
#+end_src

#+RESULTS:
: (2,1)

**** Arrays
Mutable

#+begin_src amm
val a = Array(1, 2, 3)
#+end_src

#+RESULTS:
: a: Array[Int] = Array(1, 2, 3)

**** Lists
Immutable

#+begin_src amm
val l = List('a', 'b', 'c')
#+end_src

#+RESULTS:
: l: List[Char] = List('a', 'b', 'c')

***** Access by index
#+begin_src amm
println(l(0))
#+end_src

#+RESULTS:
: a

***** Length
#+begin_src amm
println(l.length)
#+end_src

#+RESULTS:
: 3

***** Reverse
#+begin_src amm
println(l.reverse)
#+end_src

#+RESULTS:
: List(c, b, a)

***** Map
#+begin_src amm
println(List(1, 2, 3).map(_ * 2))
#+end_src

#+RESULTS:
: List(2, 4, 6)

***** Filter
#+begin_src amm
println(List(5, 6, 7, 8, 9, 10).filter(_ % 2 == 0))
#+end_src

#+RESULTS:
: List(6, 8, 10)

***** Reduce Left
#+begin_src amm
println(List(1, 2, 3).reduceLeft(_ + _))
#+end_src

#+RESULTS:
: 6

***** Range to List
#+begin_src amm
println((1 to 5).toList)
#+end_src

#+RESULTS:
: List(1, 2, 3, 4, 5)

***** Prepend
#+begin_src amm
println(0 :: List(1, 2, 3))
#+end_src

#+RESULTS:
: List(0, 1, 2, 3)

**** Sets
Iterables that can't have duplicate elements
#+begin_src amm
val provinces = Set("Quebec", "Ontario", "Manitoba")
#+end_src

#+RESULTS:
: provinces: Set[String] = Set("Quebec", "Ontario", "Manitoba")

#+begin_src amm
val otherProvinces = Set("Alberta", "Manitoba", "British Columbia")
#+end_src

#+RESULTS:
: otherProvinces: Set[String] = Set("Alberta", "Manitoba", "British Columbia")

***** Intersect
#+begin_src amm
println(provinces & otherProvinces)
#+end_src

#+RESULTS:
: Set(Manitoba)

***** Union
#+begin_src amm
println(provinces | otherProvinces)
#+end_src

#+RESULTS:
: HashSet(Quebec, Manitoba, Ontario, Alberta, British Columbia)

***** Subset of
#+begin_src amm
println(otherProvinces subsetOf provinces)
#+end_src

#+RESULTS:
: false

#+begin_src amm
println(Set(1, 2) subsetOf Set(1, 2, 3, 4, 5))
#+end_src

#+RESULTS:
: true

***** Diff
#+begin_src amm
println(otherProvinces diff provinces)
#+end_src

#+RESULTS:
: Set(Alberta, British Columbia)

*** Maps
#+begin_src amm
val countries = Map("FR" -> "France", "CA" -> "Canada", "US" -> "United States")
#+end_src

#+RESULTS:
: countries: Map[String, String] = Map("FR" -> "France", "CA" -> "Canada", "US" -> "United States")

**** Access by key
#+begin_src amm
val fr = countries("FR")
#+end_src

#+RESULTS:
: fr: String = "France"

**** Add key/value
#+begin_src amm
val moreCountries = countries + ("DE" -> "Germany")
#+end_src

#+RESULTS:
: moreCountries: Map[String, String] = Map("FR" -> "France", "CA" -> "Canada", "US" -> "United States", "DE" -> "Germany")

**** Keys
#+begin_src amm
val keys = countries.keys
#+end_src

#+RESULTS:
: keys: Iterable[String] = Set("FR", "CA", "US")

**** Values
#+begin_src amm
val values = countries.values
#+end_src

#+RESULTS:
: values: Iterable[String] = Iterable("France", "Canada", "United States")

**** Remove element by key
#+begin_src amm
val lessCountries = countries - "US"
#+end_src

#+RESULTS:
: lessCountries: Map[String, String] = Map("FR" -> "France", "CA" -> "Canada")

* Scala.js
https://www.scala-js.org/
Scala compiled to [[file:javascript.org][JavaScript]]

** Frameworks
*** Slinky
https://slinky.dev/
#+begin_quote
Write React apps in Scala just like you would in ES6
#+end_quote

*** Laminar
https://laminar.dev/
#+begin_quote
Native Scala.js library for building user interfaces
#+end_quote

*** =scalajs-react=
https://github.com/japgolly/scalajs-react
#+begin_quote
Facebook's React on Scala.js
#+end_quote

* Resources
- https://docs.scala-lang.org/tour/basics.html
- https://docs.scala-lang.org/scala3/new-in-scala3.html
- https://docs.scala-lang.org/cheatsheets/

** Metals (Scala Language Server)
- https://scalameta.org/metals/docs/editors/emacs/
- https://ag91.github.io/blog/2020/10/16/my-emacs-setup-for-scala-development/

** Functional Programming
*** Scalaz
- https://github.com/scalaz/scalaz

*** Cats
- https://github.com/typelevel/cats
- https://underscore.io/books/scala-with-cats/
- https://www.scalawithcats.com/

*** Zio
https://zio.dev/
Type-safe, composable asynchronous and concurrent programming for Scala

*** "The red book"
https://www.manning.com/books/functional-programming-in-scala

** Scala School
https://twitter.github.io/scala_school/
