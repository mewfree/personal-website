#+title: Haskell

[[file:../../../homepage.org][Homepage]] / [[file:../../../notes.org][Notes]] / [[file:../../computer-science.org][Computer Science]] / [[file:../languages.org][Programming Languages]] / Haskell

* Variables
#+begin_src haskell
let name = "Damien"
name
#+end_src

#+RESULTS:
: Damien

* Types
=::= = "has type"
#+begin_src haskell :results none
x :: Int
#+end_src

** Basic Types
| Name    | Definition                              |
|---------+-----------------------------------------|
| Int     | Machine-sized integers                  |
| Integer | Arbitrary-precision integers            |
| Double  | Double-precision floating point         |
| Bool    | Booleans                                |
| Char    | Unicode characters                      |
| String  | Lists of characters with special syntax |

* Numbers
#+begin_src haskell
1 + 1
#+end_src

#+RESULTS:
: 2

(notice the lack of parentheses)
#+begin_src haskell
min 9 10
#+end_src

#+RESULTS:
: 9

* Characters
Characters use single-quotes: ='a'=

* Strings
Strings are actually lists of characters

#+begin_src haskell
reverse "damien"
#+end_src

#+RESULTS:
: neimad

** Concatenation
#+begin_src haskell
"hello" ++ " " ++ "world"
#+end_src

#+RESULTS:
: hello world

Putting something at the beginning of a list using =:= (cons operator) is for efficient
#+begin_src haskell
'a':" long string"
#+end_src

#+RESULTS:
: a long string

* Lists
In [[file:haskell.org][Haskell]], lists are homogeneous. They can only contain elements of the same types (only integers, or only string).
#+begin_src haskell :results verbatim
import Data.List
sort [3,2,1]
#+end_src

#+RESULTS:
: [1,2,3]

** Accessing Elements by Index
To access an element of a list by index, use =!!=
Indices start at 0
#+begin_src haskell
"Damien" !! 2
#+end_src

#+RESULTS:
: m

#+begin_src haskell
[0,1,2,3] !! 3
#+end_src

#+RESULTS:
: 3

** Head / Tail / Last / Init
#+begin_src haskell
head ['a','b','c','d','e']
#+end_src

#+RESULTS:
: a

#+begin_src haskell
tail ['a','b','c','d','e']
#+end_src

#+RESULTS:
: bcde

#+begin_src haskell
init ['a','b','c','d','e']
#+end_src

#+RESULTS:
: abcd

#+begin_src haskell
last ['a','b','c','d','e']
#+end_src

#+RESULTS:
: e

** Length
#+begin_src haskell
length [5,4,3,2,1]
#+end_src

#+RESULTS:
: 5

** Empty List
=null= checks if a list is empty
#+begin_src haskell
null [1,2,3]
#+end_src

#+RESULTS:
: False

#+begin_src haskell
null []
#+end_src

#+RESULTS:
: True

** Prepending
#+begin_src haskell :results verbatim
0 : [1, 2, 3]
#+end_src

#+RESULTS:
: [0,1,2,3]

** Concatenation
#+begin_src haskell :results verbatim
concat [[1,2], [3,4]]
#+end_src

#+RESULTS:
: [1,2,3,4]

#+begin_src haskell :results verbatim
[1,2] ++ [3,4]
#+end_src

#+RESULTS:
: [1,2,3,4]

** Take / Drop
=take n list= returns the first nth element from list
#+begin_src haskell :results verbatim
take 2 [1,2,3,4,5]
#+end_src

#+RESULTS:
: [1,2]

=drop n list= returns list minus the first nth element from list
#+begin_src haskell :results verbatim
drop 3 [1,2,3,4,5]
#+end_src

#+RESULTS:
: [4,5]

** Minimum / Maximum / Sum / Product
#+begin_src haskell
minimum [1,2,3,4,5]
#+end_src

#+RESULTS:
: 1

#+begin_src haskell
maximum [1,2,3,4,5]
#+end_src

#+RESULTS:
: 5

#+begin_src haskell
sum [1,2,3]
#+end_src

#+RESULTS:
: 6

#+begin_src haskell
product [3,3,2]
#+end_src

#+RESULTS:
: 18

** Element in List
#+begin_src haskell
elem 1 [1,2,3]
#+end_src

#+RESULTS:
: True

#+begin_src haskell
elem 0 [1,2,3]
#+end_src

#+RESULTS:
: False

Usually written as an infix function:
#+begin_src haskell
2 `elem` [1,2,3]
#+end_src

#+RESULTS:
: True

** Map
#+begin_src haskell :results verbatim
doubleMe x = x*2
map doubleMe [1,2,3]
#+end_src

#+RESULTS:
: [2,4,6]

** Filter
#+begin_src haskell :results verbatim
filter (\x -> x `mod` 2 == 0) [1..9]
#+end_src

#+RESULTS:
: [2,4,6,8]

** Foldl
#+begin_src haskell
foldl (+) 0 [1,2,3]
#+end_src

#+RESULTS:
: 6

#+begin_src haskell
foldl (-) 0 [1,2,3]
#+end_src

#+RESULTS:
: -6

** Foldr
#+begin_src haskell
foldr (-) 0 [1,2,3]
#+end_src

#+RESULTS:
: 2

** Unfoldr
#+begin_src haskell :results verbatim
unfoldr (\x -> if x == 0 then Nothing else Just (x, x-1)) 10
#+end_src

#+RESULTS:
: [10,9,8,7,6,5,4,3,2,1]

** ConcatMap
#+begin_src haskell :results verbatim
concatMap (\x -> [0, x]) [1..3]
#+end_src

#+RESULTS:
: [0,1,0,2,0,3]

Conceptually the same as combining =concat= and =map=
#+begin_src haskell :results verbatim
concat $ map (\x -> [0, x]) [1..3]
#+end_src

#+RESULTS:
: [0,1,0,2,0,3]

** Scanl
#+begin_src haskell :results verbatim
scanl (+) 0 [1..5]
#+end_src

#+RESULTS:
: [0,1,3,6,10,15]

The above shows you the "steps" of a sum:
#+begin_src haskell
sum [1..5]
#+end_src

#+RESULTS:
: 15

** sortBy
#+begin_src haskell :results verbatim
sortBy (\(a,_) (b,_) -> compare a b) [(3, "bananas"), (5, "apples"), (2, "pears")]
#+end_src

#+RESULTS:
: [(2,"pears"),(3,"bananas"),(5,"apples")]

#+begin_src haskell :results verbatim
import Data.Function
sortBy (compare `on` fst) [(3, "bananas"), (5, "apples"), (2, "pears")]
#+end_src

#+RESULTS:
: [(2,"pears"),(3,"bananas"),(5,"apples")]

* Tuples
Tuples have a *fixed* number of elements.
The elements of tuples do *not* need to be of the same type.
#+begin_src haskell :results verbatim
(1, True)
#+end_src

#+RESULTS:
: (1,True)

** Pairs
*** fst (first)
#+begin_src haskell :results verbatim
fst (1, True)
#+end_src

#+RESULTS:
: 1

*** snd (second)
#+begin_src haskell :results verbatim
snd (1, True)
#+end_src

#+RESULTS:
: True

* Ranges
#+begin_src haskell :results verbatim
[1..10]
#+end_src

#+RESULTS:
: [1,2,3,4,5,6,7,8,9,10]

Works for chars too:
#+begin_src haskell
['a'..'z']
#+end_src

#+RESULTS:
: abcdefghijklmnopqrstuvwxyz

Can specify a "step"
#+begin_src haskell :results verbatim
[2,4..20]
#+end_src

#+RESULTS:
: [2,4,6,8,10,12,14,16,18,20]

And go backwards
#+begin_src haskell :results verbatim
[10,9..0]
#+end_src

#+RESULTS:
: [10,9,8,7,6,5,4,3,2,1,0]

Lists can be infinite
#+begin_src haskell :results verbatim
take 5 [2,4..]
#+end_src

#+RESULTS:
: [2,4,6,8,10]

=cycle= repeats the same list to infinity
#+begin_src haskell :results verbatim
take 10 (cycle [0,1])
#+end_src

#+RESULTS:
: [0,1,0,1,0,1,0,1,0,1]

=repeat= produces an infinite list of a single element
#+begin_src haskell :results verbatim
take 10 (repeat 9)
#+end_src

#+RESULTS:
: [9,9,9,9,9,9,9,9,9,9]

The above example can be done more simply using =replicate=
#+begin_src haskell :results verbatim
replicate 5 1
#+end_src

#+RESULTS:
: [1,1,1,1,1]

* List Comprehensions
#+begin_src haskell :results verbatim
[x*2 | x <- [1..10]]
#+end_src

#+RESULTS:
: [2,4,6,8,10,12,14,16,18,20]

#+begin_src haskell :results verbatim
[x*2 | x <- [1..10], x*2 >= 12]
#+end_src

#+RESULTS:
: [12,14,16,18,20]

* Functions
Function name is followed by parameters separated by spaces
#+begin_src haskell
doubleMe x = x + x
doubleMe 2
#+end_src

#+RESULTS:
: 4

#+begin_src haskell
doubleUs x y = x*2 + y*2
doubleUs 2 4
#+end_src

#+RESULTS:
: 12

** Anonymous Functions
The =\x= is supposed to look like a lambda Î»
#+begin_src haskell :results verbatim
map (\x -> x + 1) [1..3]
#+end_src

#+RESULTS:
: [2,3,4]

** Flip
Flips the argument order
#+begin_src haskell :results verbatim
concat x y = x ++ " " ++ y
flip concat "damien" "hello"
#+end_src

#+RESULTS:
: hello damien

* Sections
=(2^)= is equivalent to =(^) 2= or =\x -> 2 ^ x=
=(^2)= is equivalent to =flip (^) 2= or =\x -> x ^ 2=

Examples:
#+begin_src haskell
(+1) 1
#+end_src

#+RESULTS:
: 2

#+begin_src haskell
(2*) 2
#+end_src

#+RESULTS:
: 4

* Reverse Application Operator
#+begin_src haskell
import Data.Function
1 & (+1)
#+end_src

#+RESULTS:
: 2

#+begin_src haskell
import Data.Function
"Damien" & length
#+end_src

#+RESULTS:
: 6

* Pointfree
#+begin_src haskell
let f = (*2)
let g = (^2)
#+end_src

#+begin_src haskell
g (f 2)
#+end_src

#+RESULTS:
: 16

#+begin_src haskell
(g . f) 2
#+end_src

#+RESULTS:
: 16

* $ operator
Using example above from point-free programming, parentheses can be removed by adding the =$= operator:
#+begin_src haskell
g . f $ 2
#+end_src

#+RESULTS:
: 16

* Web Frameworks
** IHP
https://ihp.digitallyinduced.com/

* Resources
** List of Resources
https://www.haskell.org/documentation/

** CIS 194: Introduction to Haskell
https://www.seas.upenn.edu/~cis194/spring13/lectures.html

** Real World Haskell
http://book.realworldhaskell.org/read/

** Haskell Programming from first principles
https://haskellbook.com/

** What I wish I knew when learning Haskell
http://dev.stephendiehl.com/hask/

** Programming in Haskell
Book by Graham Hutton

** WikiBooks
https://en.wikibooks.org/wiki/Haskell

** Learn You a Haskell for Great Good
Used to be recommended a lot, but saw a lot of comments saying it was outdated:
http://learnyouahaskell.com/chapters

** Plain English explanation about monads
https://chrisdone.com/posts/monads/

** The appeal of bidirectional type-checking
https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html

** Data Structures
- https://mmhaskell.com/data-structures
- https://mmhaskell.com/ebooks
